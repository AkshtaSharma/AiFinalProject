import time
def solve_sudoku(board):
    
    def solve(curr_board):
        def zero_cell():         
            return next(((row, col) for row in range(9) for col in range(9) if curr_board[row][col] == 0), None)
            
        def allowed(row, col, num):
            for i in range(9):
                if curr_board[row][i] == num or curr_board[i][col] == num or curr_board[(row // 3) * 3 + i // 3][(col // 3) * 3 + i % 3] == num:
                    return False
            return True

        if not zero_cell():
            return True

        # try all possible values for that cell
        row, col = zero_cell()
        for num in range(1, 10):
            if allowed(row, col, num):
                curr_board[row][col] = num

                if solve(curr_board):
                    #print("in")
                    return True

                curr_board[row][col] = 0

        return False

    solve(board)
    print(board)
    return board




#-----------------------------

board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 0]]

# =============================================================================
# board = [
#     [8, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 3, 6, 0, 0, 0, 0, 0],
#     [0, 7, 0, 0, 9, 0, 2, 0, 0],
#     [0, 5, 0, 0, 0, 7, 0, 0, 0],
#     [0, 0, 0, 0, 4, 5, 7, 0, 0],
#     [0, 0, 0, 1, 0, 0, 0, 3, 0],
#     [0, 0, 1, 0, 0, 0, 0, 6, 8],
#     [0, 0, 8, 5, 0, 0, 0, 1, 0],
#     [0, 9, 0, 0, 0, 0, 4, 0, 0]
# ]
# =============================================================================

# harder
# =============================================================================
# board = [
#     [0, 0, 0, 0, 0, 3, 2, 9, 0],
#     [0, 0, 2, 0, 0, 0, 8, 0, 0],
#     [0, 0, 0, 0, 8, 0, 0, 0, 5],
#     [6, 4, 0, 9, 0, 0, 0, 5, 0],
#     [0, 0, 0, 7, 0, 8, 0, 0, 0],
#     [0, 1, 0, 0, 0, 4, 0, 7, 8],
#     [7, 0, 0, 0, 6, 0, 0, 0, 0],
#     [0, 0, 4, 0, 0, 0, 9, 0, 0],
#     [0, 2, 6, 5, 0, 0, 0, 0, 0]
# ]
# 
# =============================================================================
# =============================================================================
# board = [
#     [6, 0, 0, 0, 3, 0, 7, 8, 0],
#     [0, 3, 0, 1, 8, 0, 2, 0, 0],
#     [0, 0, 0, 2, 0, 6, 3, 0, 1],
#     [0, 0, 4, 0, 0, 0, 0, 0, 5],
#     [0, 0, 3, 0, 0, 0, 9, 0, 0],
#     [9, 0, 0, 0, 0, 0, 4, 0, 0],
#     [1, 0, 5, 4, 0, 7, 0, 0, 0],
#     [0, 0, 7, 0, 2, 9, 0, 4, 0],
#     [0, 8, 6, 0, 5, 0, 0, 0, 3]
# ]
# =============================================================================

# =============================================================================
# board = [
#     [0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 3, 0, 8, 5],
#     [0, 0, 1, 0, 2, 0, 0, 0, 0],
#     [0, 0, 0, 5, 0, 7, 0, 0, 0],
#     [0, 0, 4, 0, 0, 0, 1, 0, 0],
#     [0, 9, 0, 0, 0, 0, 0, 0, 0],
#     [5, 0, 0, 0, 0, 0, 0, 7, 3],
#     [0, 0, 2, 0, 1, 0, 0, 0, 0],
#     [0, 0, 0, 0, 4, 0, 0, 0, 9]]
# =============================================================================


t = time.time()
solve_sudoku(board)
elapsed = time.time() - t
print(elapsed)
    